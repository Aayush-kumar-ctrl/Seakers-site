/* window.addEventListener("DOMContentLoaded", async () => { ... })
 
If you want your page to feel fast, show your UI right after DOMContentLoaded.
If you need to hide a loading spinner or start animations after all assets are ready, use window.onload.


--------------------------------------------------------------------------------------------------------------------
3. async () => { ... }
This is an asynchronous arrow function. 

Arrow Functions

Arrow functions are a modern ES6 feature.
🔹 They are often shorter and easier to read, especially for callbacks.

✅ Example:

window.addEventListener("click", () => {
  console.log("Clicked!");
});


Here, () => { ... } is an arrow function used as an event handler.

------------


🧠 What’s asynchronous?  here: async ()

JavaScript normally runs line by line (synchronous).

But sometimes, we must wait for something — like:

Fetching data from a server

Reading a file

Delays or timers

Instead of blocking the page while waiting, JavaScript continues running other code — that’s asynchronous behavior.
---------------------

🕓 3️⃣ await — Wait for async result

You can only use await inside an async function.

It means:

“Pause here until the Promise(future value) is done — then continue.”

Example:

async function fetchUser() {
  console.log("Fetching user...");
  const response = await fetch("https://api.example.com/user");
  const data = await response.json();
  console.log("User data:", data);
}


fetch() returns a Promise (a future value).

await waits for that Promise to resolve (complete).

The code doesn’t block the browser — it just waits inside this function.

🧠 So await makes asynchronous code look like normal synchronous code — easier to read and write.

---------------------------------
🔥 In your code:
window.addEventListener("DOMContentLoaded", async () => {
  await window.Clerk.load();
});


means:

“When HTML is ready, run this arrow function asynchronously, and wait for Clerk to finish loading before moving ahead.”

------------------------------------------------




*/

