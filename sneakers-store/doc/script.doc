/* window.addEventListener("DOMContentLoaded", async () => { ... })
 
If you want your page to feel fast, show your UI right after DOMContentLoaded.
If you need to hide a loading spinner or start animations after all assets are ready, use window.onload.


--------------------------------------------------------------------------------------------------------------------
3. async () => { ... }
This is an asynchronous arrow function. 

Arrow Functions

Arrow functions are a modern ES6 feature.
🔹 They are often shorter and easier to read, especially for callbacks.

✅ Example:

window.addEventListener("click", () => {
  console.log("Clicked!");
});


Here, () => { ... } is an arrow function used as an event handler.

------------


🧠 What’s asynchronous?  here: async ()

JavaScript normally runs line by line (synchronous).

But sometimes, we must wait for something — like:

Fetching data from a server

Reading a file

Delays or timers

Instead of blocking the page while waiting, JavaScript continues running other code — that’s asynchronous behavior.
---------------------

🕓 3️⃣ await — Wait for async result

You can only use await inside an async function.

It means:

“Pause here until the Promise(future value) is done — then continue.”

Example:

async function fetchUser() {
  console.log("Fetching user...");
  const response = await fetch("https://api.example.com/user");
  const data = await response.json();
  console.log("User data:", data);
}


fetch() returns a Promise (a future value).

await waits for that Promise to resolve (complete).

The code doesn’t block the browser — it just waits inside this function.

🧠 So await makes asynchronous code look like normal synchronous code — easier to read and write.

---------------------------------
🔥 In your code:
window.addEventListener("DOMContentLoaded", async () => {
  await window.Clerk.load();
});


means:

“When HTML is ready, run this arrow function asynchronously, and wait for Clerk to finish loading before moving ahead.”

------------------------------------------------

🧩 The code:
// 🎯 Get important DOM elements
const signInBtn = document.getElementById("sign-in-btn");
const signUpBtn = document.getElementById("sign-up-btn");
const signOutBtn = document.getElementById("sign-out-btn");
const checkoutBtn = document.getElementById("checkout-btn");
const grid = document.getElementById("product-grid");

🔹 Step 1: What is the DOM?

DOM = Document Object Model
When a web page is loaded, the browser converts the HTML into a JavaScript object structure called the DOM.

That means every element in HTML (like <button>, <div>, <img>, etc.) becomes a JavaScript object that you can control using code — you can:
Read or change its content
Change its color, text, or visibility
Add click or hover behavior

🔹 Step 2: document.getElementById("...")

This method finds and returns a specific HTML element whose id attribute matches the string inside the parentheses.

Example:

🧠 HTML
<button id="sign-in-btn">Sign In</button>

⚙️ JavaScript
const signInBtn = document.getElementById("sign-in-btn");


Now, signInBtn is a reference to that actual button in the page.

You can now do things like:

signInBtn.style.color = "red";
signInBtn.addEventListener("click", () => alert("Signed in!"));

🔹 Step 3: What each line does
Line	What it does	Example use
const signInBtn = document.getElementById("sign-in-btn");	Finds the “Sign In” button	Add click event for user login
const signUpBtn = document.getElementById("sign-up-btn");	Finds the “Sign Up” button	Open registration form
const signOutBtn = document.getElementById("sign-out-btn");	Finds the “Sign Out” button	Log user out
const checkoutBtn = document.getElementById("checkout-btn");	Finds the “Checkout” button	Start payment or checkout
const grid = document.getElementById("product-grid");	Finds the main product grid <div>	Display all products dynamically
🔹 Step 4: Why we store them in variables

Instead of writing document.getElementById() again and again,
we store each element in a variable (signInBtn, grid, etc.) so we can easily use it multiple times later.

✅ Example:

signInBtn.addEventListener("click", () => {
  console.log("Sign in clicked!");
});

grid.innerHTML = "<p>Products will load here...</p>";


This makes the code shorter, cleaner, and faster to execute.

-------------------------------------------------------------------------------------------------




*/

